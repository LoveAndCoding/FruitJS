#!/usr/bin/env node
/**	Command Line Interface
  *	
  **/
var $ = require('../src/Utils.js'),
	argv = require('optimist')
			.options({
				'o':{
						'alias':'output',
						'default':'./output/'
					},
				's':{
						'alias':'singlePage',
						'boolean':true,
						'description':'Flag indicating that all markdown should be exported to a single page'
					},
				'x':{
						'alias':'disableExtraction',
						'boolean':true,
						'description':'Disables the automatic extraction of images and assets from internal links in the documents'
					}
			})
			.argv,
	path = require('path'),
	fs = require('fs'),
	FruitJS = require('../fruit.js');

var manifest = argv._[0] || 'manifest.json';

$.PromiseReader(manifest).then(function (fest) {
	var options = JSON.parse(fest),
		doc = new FruitJS(options.name || "Documentation", path.resolve(argv.o), manifest),
		addTreeFn = function (arr, fn) {
				for(var a in arr) {
					addItemFn(arr[a], fn);
				}
			},
		addItemFn = function (itm, fn) {
				if(!fs.existsSync(itm)) {
					console.error('File not found.', itm);
					process.exit();
				} else if(fs.statSync(itm).isDirectory()) {
					var sub = fs.readdirSync(itm);
					for(var s in sub)
						sub[s] = itm + path.sep + sub[s];
					addTreeFn(sub,fn);
				} else {
					fn(itm);
				}
			};
	
	addTreeFn(options.css, doc.addCSS.bind(doc));
	addTreeFn(options.less, doc.addLESS.bind(doc));
	addTreeFn(options.js, doc.addJS.bind(doc));
	addTreeFn(options.images, doc.addImage.bind(doc));
	addTreeFn(options.assets, doc.addAsset.bind(doc));
	
	if(options.imageTitle) {
		doc.addImage(options.imageTitle);
		doc.setImageTitle(path.basename(options.imageTitle));
	}
	
	if(argv.x) {
		doc.disableExtraction();
	}
	
	if(options.preMenu) {
		if(options.preMenu instanceof Array) {
			for(var p in options.preMenu) {
				doc.addBeforeMenu(options.preMenu[p]);
			}
		} else {
			doc.addBeforeMenu(options.preMenu);
		}
	}
	if(options.postMenu) {
		if(options.postMenu instanceof Array) {
			for(var p in options.postMenu) {
				doc.addAfterMenu(options.postMenu[p]);
			}
		} else {
			doc.addAfterMenu(options.postMenu);
		}
	}
	
	for(var p in options.pages)
		doc.addPage($.GetRelativePath(manifest, options.pages[p]));
	
	doc.setTOCLevel(options.tocLevel || 6).render(argv.s || options.singlePage)
		.then(function () {
				console.log('Files were rendered succussfully and placed in the folder '+path.resolve(argv.o));
			},
			function (err) {
				console.error(err && err.stack ? err.stack : err);
			});
	
}, function (err) {
	console.error('Unable to read file '+manifest);
	console.error(err);
});